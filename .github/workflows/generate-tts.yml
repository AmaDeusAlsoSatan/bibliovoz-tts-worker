name: Generate TTS Audio

on:
  workflow_dispatch:
    inputs:
      bookId:
        required: true
      chapterId:
        required: true
      chapterText:
        required: true
      # NOVO INPUT: Recebe o nome do modelo de voz
      voiceModel:
        description: 'O nome do modelo de voz Piper a ser usado'
        required: true
        default: 'pt_BR-edresson-medium'

jobs:
  generate-audio:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download Piper Model
        run: |
          # Monta as URLs dinamicamente baseadas no input
          VOICE_MODEL="${{ github.event.inputs.voiceModel }}"
          # Lógica para encontrar o repo correto (pode ser expandida)
          REPO_URL="https://huggingface.co/rhasspy/piper-voices"
          if [[ $VOICE_MODEL == *"edresson"* ]]; then
            REPO_URL="https://huggingface.co/edresson/piper-pt-br-vits"
          fi
          
          echo "Baixando modelo $VOICE_MODEL de $REPO_URL"
          wget "$REPO_URL/resolve/main/$VOICE_MODEL.onnx" -O model.onnx
          wget "$REPO_URL/resolve/main/$VOICE_MODEL.onnx.json" -O model.onnx.json

      - name: Generate Audio File
        run: |
          mkdir -p audio_output
          python scripts/generate_audio.py \
            --text "${{ github.event.inputs.chapterText }}" \
            --model "model.onnx" \
            --config "model.onnx.json" \
            --output_file "audio_output/${{ github.event.inputs.chapterId }}.wav"

      - name: Upload Audio to GitHub LFS
        id: upload_step
        env:
          # Usa o nosso token poderoso em vez do padrão
          GITHUB_TOKEN: ${{ secrets.WORKER_PAT }} 
        run: |
          python scripts/upload_to_github.py \
            --local_file "audio_output/${{ github.event.inputs.chapterId }}.wav" \
            --repo_owner "AmaDeusAlsoSatan" \
            --repo_name "bibliovoz-audio-storage" \
            --dest_path "audio/${{ github.event.inputs.bookId }}/${{ github.event.inputs.chapterId }}.wav" \
            --github_token "$GITHUB_TOKEN"
      
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.FIREBASE_SA }}'

      - name: Update Firestore
        run: |
          python scripts/update_firestore.py \
            --book-id "${{ github.event.inputs.bookId }}" \
            --chapter-id "${{ github.event.inputs.chapterId }}" \
            --audio-url "${{ steps.upload_step.outputs.audio_url }}"
